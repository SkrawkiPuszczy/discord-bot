// Code generated by wsdl2go. DO NOT EDIT.

package meteo

import (
	"github.com/fiorix/wsdl2go/soap"
)

// Namespace was auto-generated from WSDL.
var Namespace = "https://burze.dzis.net/soap.php"

// NewSerwerSOAPPort creates an initializes a SerwerSOAPPort.
func NewSerwerSOAPPort(cli *soap.Client) SerwerSOAPPort {
	return &serwerSOAPPort{cli}
}

// SerwerSOAPPort was auto-generated from WSDL
// and defines interface for the remote service. Useful for testing.
type SerwerSOAPPort interface {
	// Uwierzytelnianie do uslugi API                 Input
	//           string klucz do uslugi API                 Output
	//                 boolean                 --- ENG ---
	//         Authentication service API                 Input
	//               string klucz Key to the service API
	//       Output                 boolean
	KeyAPI(klucz string) (bool, error)

	// Ustala wspolrzedne dla wskazanej miejscowosci. Zgodnie z lista
	// miejscowosci na stronie.                 Input
	//    string nazwa Nazwa miejscowosci                 string klucz
	// do uslugi API, parametr opcjonalny jezeli uwierzytelnienie wykonane
	// poprzez naglowek.                 Output                 float
	// x,                  float y Wspolrzedne DM miejscowosci.
	//              --- ENG ---                 Sets the coordinates
	// for the specified locality. According to the list of village
	// on the site.                 Input                 string nazwa
	// Name of the town                 string klucz Key to the service
	// API, optional parameter if the authentication header.
	//           Output                 float x                 float
	// y Coordinates of a location DM.
	Miejscowosc(nazwa string, klucz string) (*MyComplexTypeMiejscowosc, error)

	// Zwraca liste miejscowosci na podstawie podanego ciagu znakow.
	//                 Input                 string nazwa Nazwa miejscowosci,
	// minimum trzy znaki.                 string kraj Kod ISO 3166
	// (kod alfa-2) np. PL tylko miejscowosci na obszarze Polski. Jezeli
	// wszystkie wstaw pusty ciag.                 string klucz do
	// uslugi API, parametr opcjonalny jezeli uwierzytelnienie wykonane
	// poprzez naglowek.                 Output                 string
	// Lista miejscowosci zapisana w JSON                 --- ENG ---
	//                 Returns a list of the village on the basis of
	// the specified string.                 Input
	// string nazwa Name of the town a minimum of three characters.
	//                 string kraj ISO 3166 (alfa-2) code for example.
	// PL only town on the Polish territory. If all insert an empty
	// string.                 string klucz Key to the service API,
	// optional parameter if the authentication header.
	//      Output                 string List of town saved in JSON
	Miejscowosci_lista(nazwa string, kraj string, klucz string) (string, error)

	// Sprawdza czy dla danego punktu, wydano ostrzezenia pogodowe.
	// Tylko obszar Polski.                 Input                 float
	// y Wspolrzedna y DM                 float x Wspolrzedna x DM
	//                 string klucz do uslugi API, parametr opcjonalny
	// jezeli uwierzytelnienie wykonane poprzez naglowek.
	//        Output                 string od_dnia Nieuzywany
	//             string do_dnia Nieuzywany                 integer
	// mroz,                 string mroz_od_dnia Mroz ostrzezenie od
	// dnia (UTC), np. 2014-12-21 20:45:00,                 string
	// mroz_do_dnia Mroz ostrzezenie do dnia (UTC),
	//  integer upal,                  string upal_od_dnia Upal ostrzezenie
	// od dnia (UTC), np. 2014-12-21 20:45:00,                 string
	// upal_do_dnia Upal ostrzezenie do dnia (UTC),
	//  integer wiatr,                 string wiatr_od_dnia Wiatr ostrzezenie
	// od dnia (UTC), np. 2014-12-21 20:45:00,                 string
	// wiatr_do_dnia Wiatr ostrzezenie do dnia (UTC),
	//    integer opad,                  string opad_od_dnia Opad ostrzezenie
	// od dnia (UTC), np. 2014-12-21 20:45:00,                 string
	// opad_do_dnia Opad ostrzezenie do dnia (UTC),
	//  integer burza,                  string burza_od_dnia Burza
	// ostrzezenie od dnia (UTC), np. 2014-12-21 20:45:00,
	//         string burza_do_dnia Burza ostrzezenie do dnia (UTC),
	//                  integer traba.                  string traba_od_dnia
	// Traba ostrzezenie od dnia (UTC), np. 2014-12-21 20:45:00,
	//               string traba_do_dnia Traba ostrzezenie do dnia
	// (UTC),                  Oznaczenie 0 - brak, 1 - I stopien,
	// 2 - II stopien, 3 - III stopien.                 ---- ENG ----
	//                 Checks if a given point, issued weather warnings.
	// Only the Polish area.                 Input
	// float y Coordinate y                 float x Coordinate x
	//               string klucz Key to the service API, optional
	// parameter if the authentication header.                 Output
	//                 string od_dnia Not used,                 string
	// do_dnia Not used,                 integer mroz Frost,
	//           string mroz_od_dnia Warning frost of date (UTC) eg
	// 2014-12-21 20:45:00,                 string mroz_do_dnia Warning
	// frost to day,                  integer upal Heat,
	//        string upal_od_dnia Warning heat of date (UTC) eg 2014-12-21
	// 20:45:00,                 string upal_do_dnia Warning heat to
	// day,                  integer wiatr Wind,                 string
	// wiatr_od_dnia Warning wind of date (UTC) eg 2014-12-21 20:45:00,
	//                 string wiatr_do_dnia Warning wind to day,
	//                 integer opad Precipitation,
	//  string opad_od_dnia Warning precipitation of date (UTC) eg
	// 2014-12-21 20:45:00,                 string opad_do_dnia Warning
	// precipitation to day,                  integer burza Storms,
	//                  string burza_od_dnia Warning storm of date
	// (UTC) eg 2014-12-21 20:45:00,                 string burza_do_dnia
	// Warning storm to day,                  integer traba Tornados.
	//                  string traba_od_dnia Warning tornados of date
	// (UTC) eg 2014-12-21 20:45:00,                 string traba_do_dnia
	// Warning tornados to day,                  Determination of 0
	// - no, 1 - first degree, 2 - second degree, 3 - third degree.
	Ostrzezenia_pogodowe(y float64, x float64, klucz string) (*MyComplexTypeOstrzezenia, error)

	// Sprawdza czy dla danego punktu o wskazanym promieniu monitorowania
	// zarejestrowano wyladowania atmosferyczne.                 Input
	//                  string y Wspolrzedna y DM,
	// string x Wspolrzedna x DM,                 integer promien Promien
	// objety analiza, opcjonalne. Domyslnie 25 km,
	//  string klucz do uslugi API, parametr opcjonalny jezeli uwierzytelnienie
	// wykonane poprzez naglowek.                 Output
	//       integer liczba Liczba wyladowan w wskazanym promieniu
	// od wybranego punktu,                 float odleglosc Odleglosc
	// do najblizszego zarejestrowanego wyladowania,
	//   string kierunek Kierunek do najblizszego wyladowania (E, NE,
	// N, NW, W, SW, S, SE). Opis W - zachod, N - polnoc, E - wschod,
	// S - poludnie.                 integer okres - liczba minut,
	// okres czasu obejmujacy dane (10, 15, 20 minut).
	//     --- ENG ---                 Checks if a given point with
	// a specified radius of monitoring registered lightnings.
	//             Input                 string y Coordinate y
	//             string x Coordinate x                 integer promien
	// The radius covered by point, optional. By default, 25 km
	//              string klucz Key to the service API, optional parameter
	// if the authentication header.                 Output
	//          integer liczba The number of lightning in specified
	// radius from a selected point                 float odleglosc
	// The distance to the nearest registered lightning
	//      string kierunek The direction to the nearest lightning
	// (E, E, N , NW, W, SW, S, SE). Description W - West, N - North,
	// E - East, S - South.                 integer okres - The number
	// of minutes of time period containing the data (10, 15, 20 minutes)
	Szukaj_burzy(y string, x string, promien int, klucz string) (*MyComplexTypeBurza, error)
}

// MyComplexTypeBurza was auto-generated from WSDL.
type MyComplexTypeBurza struct {
	Liczba    *int     `xml:"liczba,omitempty" json:"liczba,omitempty" yaml:"liczba,omitempty"`
	Odleglosc *float64 `xml:"odleglosc,omitempty" json:"odleglosc,omitempty" yaml:"odleglosc,omitempty"`
	Kierunek  *string  `xml:"kierunek,omitempty" json:"kierunek,omitempty" yaml:"kierunek,omitempty"`
	Okres     *int     `xml:"okres,omitempty" json:"okres,omitempty" yaml:"okres,omitempty"`
}

// MyComplexTypeMiejscowosc was auto-generated from WSDL.
type MyComplexTypeMiejscowosc struct {
	Y *float64 `xml:"y,omitempty" json:"y,omitempty" yaml:"y,omitempty"`
	X *float64 `xml:"x,omitempty" json:"x,omitempty" yaml:"x,omitempty"`
}

// MyComplexTypeOstrzezenia was auto-generated from WSDL.
type MyComplexTypeOstrzezenia struct {
	Od_dnia       *string `xml:"od_dnia,omitempty" json:"od_dnia,omitempty" yaml:"od_dnia,omitempty"`
	Do_dnia       *string `xml:"do_dnia,omitempty" json:"do_dnia,omitempty" yaml:"do_dnia,omitempty"`
	Mroz          *int    `xml:"mroz,omitempty" json:"mroz,omitempty" yaml:"mroz,omitempty"`
	Mroz_od_dnia  *string `xml:"mroz_od_dnia,omitempty" json:"mroz_od_dnia,omitempty" yaml:"mroz_od_dnia,omitempty"`
	Mroz_do_dnia  *string `xml:"mroz_do_dnia,omitempty" json:"mroz_do_dnia,omitempty" yaml:"mroz_do_dnia,omitempty"`
	Upal          *int    `xml:"upal,omitempty" json:"upal,omitempty" yaml:"upal,omitempty"`
	Upal_od_dnia  *string `xml:"upal_od_dnia,omitempty" json:"upal_od_dnia,omitempty" yaml:"upal_od_dnia,omitempty"`
	Upal_do_dnia  *string `xml:"upal_do_dnia,omitempty" json:"upal_do_dnia,omitempty" yaml:"upal_do_dnia,omitempty"`
	Wiatr         *int    `xml:"wiatr,omitempty" json:"wiatr,omitempty" yaml:"wiatr,omitempty"`
	Wiatr_od_dnia *string `xml:"wiatr_od_dnia,omitempty" json:"wiatr_od_dnia,omitempty" yaml:"wiatr_od_dnia,omitempty"`
	Wiatr_do_dnia *string `xml:"wiatr_do_dnia,omitempty" json:"wiatr_do_dnia,omitempty" yaml:"wiatr_do_dnia,omitempty"`
	Opad          *int    `xml:"opad,omitempty" json:"opad,omitempty" yaml:"opad,omitempty"`
	Opad_od_dnia  *string `xml:"opad_od_dnia,omitempty" json:"opad_od_dnia,omitempty" yaml:"opad_od_dnia,omitempty"`
	Opad_do_dnia  *string `xml:"opad_do_dnia,omitempty" json:"opad_do_dnia,omitempty" yaml:"opad_do_dnia,omitempty"`
	Burza         *int    `xml:"burza,omitempty" json:"burza,omitempty" yaml:"burza,omitempty"`
	Burza_od_dnia *string `xml:"burza_od_dnia,omitempty" json:"burza_od_dnia,omitempty" yaml:"burza_od_dnia,omitempty"`
	Burza_do_dnia *string `xml:"burza_do_dnia,omitempty" json:"burza_do_dnia,omitempty" yaml:"burza_do_dnia,omitempty"`
	Traba         *int    `xml:"traba,omitempty" json:"traba,omitempty" yaml:"traba,omitempty"`
	Traba_od_dnia *string `xml:"traba_od_dnia,omitempty" json:"traba_od_dnia,omitempty" yaml:"traba_od_dnia,omitempty"`
	Traba_do_dnia *string `xml:"traba_do_dnia,omitempty" json:"traba_do_dnia,omitempty" yaml:"traba_do_dnia,omitempty"`
}

// Operation wrapper for KeyAPI.
// OperationKeyAPIIn was auto-generated from WSDL.
type OperationKeyAPIIn struct {
	Klucz *string `xml:"klucz,omitempty" json:"klucz,omitempty" yaml:"klucz,omitempty"`
}

// Operation wrapper for KeyAPI.
// OperationKeyAPIOut was auto-generated from WSDL.
type OperationKeyAPIOut struct {
	Return *bool `xml:"return,omitempty" json:"return,omitempty" yaml:"return,omitempty"`
}

// Operation wrapper for Miejscowosc.
// OperationMiejscowoscIn was auto-generated from WSDL.
type OperationMiejscowoscIn struct {
	Nazwa *string `xml:"nazwa,omitempty" json:"nazwa,omitempty" yaml:"nazwa,omitempty"`
	Klucz *string `xml:"klucz,omitempty" json:"klucz,omitempty" yaml:"klucz,omitempty"`
}

// Operation wrapper for Miejscowosc.
// OperationMiejscowoscOut was auto-generated from WSDL.
type OperationMiejscowoscOut struct {
	Return *MyComplexTypeMiejscowosc `xml:"return,omitempty" json:"return,omitempty" yaml:"return,omitempty"`
}

// Operation wrapper for Miejscowosci_lista.
// OperationMiejscowosci_listaIn was auto-generated from WSDL.
type OperationMiejscowosci_listaIn struct {
	Nazwa *string `xml:"nazwa,omitempty" json:"nazwa,omitempty" yaml:"nazwa,omitempty"`
	Kraj  *string `xml:"kraj,omitempty" json:"kraj,omitempty" yaml:"kraj,omitempty"`
	Klucz *string `xml:"klucz,omitempty" json:"klucz,omitempty" yaml:"klucz,omitempty"`
}

// Operation wrapper for Miejscowosci_lista.
// OperationMiejscowosci_listaOut was auto-generated from WSDL.
type OperationMiejscowosci_listaOut struct {
	Return *string `xml:"return,omitempty" json:"return,omitempty" yaml:"return,omitempty"`
}

// Operation wrapper for Ostrzezenia_pogodowe.
// OperationOstrzezenia_pogodoweIn was auto-generated from WSDL.
type OperationOstrzezenia_pogodoweIn struct {
	Y     *float64 `xml:"y,omitempty" json:"y,omitempty" yaml:"y,omitempty"`
	X     *float64 `xml:"x,omitempty" json:"x,omitempty" yaml:"x,omitempty"`
	Klucz *string  `xml:"klucz,omitempty" json:"klucz,omitempty" yaml:"klucz,omitempty"`
}

// Operation wrapper for Ostrzezenia_pogodowe.
// OperationOstrzezenia_pogodoweOut was auto-generated from WSDL.
type OperationOstrzezenia_pogodoweOut struct {
	Return *MyComplexTypeOstrzezenia `xml:"return,omitempty" json:"return,omitempty" yaml:"return,omitempty"`
}

// Operation wrapper for Szukaj_burzy.
// OperationSzukaj_burzyIn was auto-generated from WSDL.
type OperationSzukaj_burzyIn struct {
	Y       *string `xml:"y,omitempty" json:"y,omitempty" yaml:"y,omitempty"`
	X       *string `xml:"x,omitempty" json:"x,omitempty" yaml:"x,omitempty"`
	Promien *int    `xml:"promien,omitempty" json:"promien,omitempty" yaml:"promien,omitempty"`
	Klucz   *string `xml:"klucz,omitempty" json:"klucz,omitempty" yaml:"klucz,omitempty"`
}

// Operation wrapper for Szukaj_burzy.
// OperationSzukaj_burzyOut was auto-generated from WSDL.
type OperationSzukaj_burzyOut struct {
	Return *MyComplexTypeBurza `xml:"return,omitempty" json:"return,omitempty" yaml:"return,omitempty"`
}

// serwerSOAPPort implements the SerwerSOAPPort interface.
type serwerSOAPPort struct {
	cli *soap.Client
}

// Uwierzytelnianie do uslugi API                 Input
//           string klucz do uslugi API                 Output
//                 boolean                 --- ENG ---
//         Authentication service API                 Input
//               string klucz Key to the service API
//       Output                 boolean
func (p *serwerSOAPPort) KeyAPI(klucz string) (bool, error) {
	α := struct {
		M OperationKeyAPIIn `xml:"tns:KeyAPI"`
	}{
		OperationKeyAPIIn{
			&klucz,
		},
	}

	γ := struct {
		M OperationKeyAPIOut `xml:"KeyAPIResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("https://burze.dzis.net/soap.php#KeyAPI", α, &γ); err != nil {
		return false, err
	}
	return *γ.M.Return, nil
}

// Ustala wspolrzedne dla wskazanej miejscowosci. Zgodnie z lista
// miejscowosci na stronie.                 Input
//    string nazwa Nazwa miejscowosci                 string klucz
// do uslugi API, parametr opcjonalny jezeli uwierzytelnienie wykonane
// poprzez naglowek.                 Output                 float
// x,                  float y Wspolrzedne DM miejscowosci.
//              --- ENG ---                 Sets the coordinates
// for the specified locality. According to the list of village
// on the site.                 Input                 string nazwa
// Name of the town                 string klucz Key to the service
// API, optional parameter if the authentication header.
//           Output                 float x                 float
// y Coordinates of a location DM.
func (p *serwerSOAPPort) Miejscowosc(nazwa string, klucz string) (*MyComplexTypeMiejscowosc, error) {
	α := struct {
		M OperationMiejscowoscIn `xml:"tns:miejscowosc"`
	}{
		OperationMiejscowoscIn{
			&nazwa,
			&klucz,
		},
	}

	γ := struct {
		M OperationMiejscowoscOut `xml:"miejscowoscResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("https://burze.dzis.net/soap.php#miejscowosc", α, &γ); err != nil {
		return nil, err
	}
	return γ.M.Return, nil
}

// Zwraca liste miejscowosci na podstawie podanego ciagu znakow.
//                 Input                 string nazwa Nazwa miejscowosci,
// minimum trzy znaki.                 string kraj Kod ISO 3166
// (kod alfa-2) np. PL tylko miejscowosci na obszarze Polski. Jezeli
// wszystkie wstaw pusty ciag.                 string klucz do
// uslugi API, parametr opcjonalny jezeli uwierzytelnienie wykonane
// poprzez naglowek.                 Output                 string
// Lista miejscowosci zapisana w JSON                 --- ENG ---
//                 Returns a list of the village on the basis of
// the specified string.                 Input
// string nazwa Name of the town a minimum of three characters.
//                 string kraj ISO 3166 (alfa-2) code for example.
// PL only town on the Polish territory. If all insert an empty
// string.                 string klucz Key to the service API,
// optional parameter if the authentication header.
//      Output                 string List of town saved in JSON
func (p *serwerSOAPPort) Miejscowosci_lista(nazwa string, kraj string, klucz string) (string, error) {
	α := struct {
		M OperationMiejscowosci_listaIn `xml:"tns:miejscowosci_lista"`
	}{
		OperationMiejscowosci_listaIn{
			&nazwa,
			&kraj,
			&klucz,
		},
	}

	γ := struct {
		M OperationMiejscowosci_listaOut `xml:"miejscowosci_listaResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("https://burze.dzis.net/soap.php#miejscowosci_lista", α, &γ); err != nil {
		return "", err
	}
	return *γ.M.Return, nil
}

// Sprawdza czy dla danego punktu, wydano ostrzezenia pogodowe.
// Tylko obszar Polski.                 Input                 float
// y Wspolrzedna y DM                 float x Wspolrzedna x DM
//                 string klucz do uslugi API, parametr opcjonalny
// jezeli uwierzytelnienie wykonane poprzez naglowek.
//        Output                 string od_dnia Nieuzywany
//             string do_dnia Nieuzywany                 integer
// mroz,                 string mroz_od_dnia Mroz ostrzezenie od
// dnia (UTC), np. 2014-12-21 20:45:00,                 string
// mroz_do_dnia Mroz ostrzezenie do dnia (UTC),
//  integer upal,                  string upal_od_dnia Upal ostrzezenie
// od dnia (UTC), np. 2014-12-21 20:45:00,                 string
// upal_do_dnia Upal ostrzezenie do dnia (UTC),
//  integer wiatr,                 string wiatr_od_dnia Wiatr ostrzezenie
// od dnia (UTC), np. 2014-12-21 20:45:00,                 string
// wiatr_do_dnia Wiatr ostrzezenie do dnia (UTC),
//    integer opad,                  string opad_od_dnia Opad ostrzezenie
// od dnia (UTC), np. 2014-12-21 20:45:00,                 string
// opad_do_dnia Opad ostrzezenie do dnia (UTC),
//  integer burza,                  string burza_od_dnia Burza
// ostrzezenie od dnia (UTC), np. 2014-12-21 20:45:00,
//         string burza_do_dnia Burza ostrzezenie do dnia (UTC),
//                  integer traba.                  string traba_od_dnia
// Traba ostrzezenie od dnia (UTC), np. 2014-12-21 20:45:00,
//               string traba_do_dnia Traba ostrzezenie do dnia
// (UTC),                  Oznaczenie 0 - brak, 1 - I stopien,
// 2 - II stopien, 3 - III stopien.                 ---- ENG ----
//                 Checks if a given point, issued weather warnings.
// Only the Polish area.                 Input
// float y Coordinate y                 float x Coordinate x
//               string klucz Key to the service API, optional
// parameter if the authentication header.                 Output
//                 string od_dnia Not used,                 string
// do_dnia Not used,                 integer mroz Frost,
//           string mroz_od_dnia Warning frost of date (UTC) eg
// 2014-12-21 20:45:00,                 string mroz_do_dnia Warning
// frost to day,                  integer upal Heat,
//        string upal_od_dnia Warning heat of date (UTC) eg 2014-12-21
// 20:45:00,                 string upal_do_dnia Warning heat to
// day,                  integer wiatr Wind,                 string
// wiatr_od_dnia Warning wind of date (UTC) eg 2014-12-21 20:45:00,
//                 string wiatr_do_dnia Warning wind to day,
//                 integer opad Precipitation,
//  string opad_od_dnia Warning precipitation of date (UTC) eg
// 2014-12-21 20:45:00,                 string opad_do_dnia Warning
// precipitation to day,                  integer burza Storms,
//                  string burza_od_dnia Warning storm of date
// (UTC) eg 2014-12-21 20:45:00,                 string burza_do_dnia
// Warning storm to day,                  integer traba Tornados.
//                  string traba_od_dnia Warning tornados of date
// (UTC) eg 2014-12-21 20:45:00,                 string traba_do_dnia
// Warning tornados to day,                  Determination of 0
// - no, 1 - first degree, 2 - second degree, 3 - third degree.
func (p *serwerSOAPPort) Ostrzezenia_pogodowe(y float64, x float64, klucz string) (*MyComplexTypeOstrzezenia, error) {
	α := struct {
		M OperationOstrzezenia_pogodoweIn `xml:"tns:ostrzezenia_pogodowe"`
	}{
		OperationOstrzezenia_pogodoweIn{
			&y,
			&x,
			&klucz,
		},
	}

	γ := struct {
		M OperationOstrzezenia_pogodoweOut `xml:"ostrzezenia_pogodoweResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("https://burze.dzis.net/soap.php#ostrzezenia_pogodowe", α, &γ); err != nil {
		return nil, err
	}
	return γ.M.Return, nil
}

// Sprawdza czy dla danego punktu o wskazanym promieniu monitorowania
// zarejestrowano wyladowania atmosferyczne.                 Input
//                  string y Wspolrzedna y DM,
// string x Wspolrzedna x DM,                 integer promien Promien
// objety analiza, opcjonalne. Domyslnie 25 km,
//  string klucz do uslugi API, parametr opcjonalny jezeli uwierzytelnienie
// wykonane poprzez naglowek.                 Output
//       integer liczba Liczba wyladowan w wskazanym promieniu
// od wybranego punktu,                 float odleglosc Odleglosc
// do najblizszego zarejestrowanego wyladowania,
//   string kierunek Kierunek do najblizszego wyladowania (E, NE,
// N, NW, W, SW, S, SE). Opis W - zachod, N - polnoc, E - wschod,
// S - poludnie.                 integer okres - liczba minut,
// okres czasu obejmujacy dane (10, 15, 20 minut).
//     --- ENG ---                 Checks if a given point with
// a specified radius of monitoring registered lightnings.
//             Input                 string y Coordinate y
//             string x Coordinate x                 integer promien
// The radius covered by point, optional. By default, 25 km
//              string klucz Key to the service API, optional parameter
// if the authentication header.                 Output
//          integer liczba The number of lightning in specified
// radius from a selected point                 float odleglosc
// The distance to the nearest registered lightning
//      string kierunek The direction to the nearest lightning
// (E, E, N , NW, W, SW, S, SE). Description W - West, N - North,
// E - East, S - South.                 integer okres - The number
// of minutes of time period containing the data (10, 15, 20 minutes)
func (p *serwerSOAPPort) Szukaj_burzy(y string, x string, promien int, klucz string) (*MyComplexTypeBurza, error) {
	α := struct {
		M OperationSzukaj_burzyIn `xml:"tns:szukaj_burzy"`
	}{
		OperationSzukaj_burzyIn{
			&y,
			&x,
			&promien,
			&klucz,
		},
	}

	γ := struct {
		M OperationSzukaj_burzyOut `xml:"szukaj_burzyResponse"`
	}{}
	if err := p.cli.RoundTripWithAction("https://burze.dzis.net/soap.php#szukaj_burzy", α, &γ); err != nil {
		return nil, err
	}
	return γ.M.Return, nil
}
